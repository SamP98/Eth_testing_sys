//version 0.9
//Author: Taurus
//copyright: tlu4@lsu.edu


Smart contract description on blockchain AI(BCAI):

Overall Desgin:
Nodes:
A: user (requestor), who has task need to be computed;
	Task will be saved on the contract storage as a struct Request.	
B: worder (provider), who can do task and get payment
	Contract maintains a dynamic list of active providers -- you can leave and rejoin at any time.
C,D,E: validators to validate whether result from B is acceptable.
	In the contract, providers that are not currently assigned a task are considered validators.
X: the smart contract itself.


Message flow:
A --requestTask→ X --assignTask→ B --completeTask→ X --validateTask→ B,C,D --submitValidation--> X --checkValidation-> All

Status:
a lifetime of Request is defined as 'Pending', 'providing', 'validating', 'complete'

Smart contract Design:
Global Struct:
    struct Request {
        address payable addr;       //payable is new feature from sol v5.0
        address payable provider;   //addr of worker
        uint128 reqID;              //requestID is the only identifier for each Request
        uint64  dataID;             //dataID used to fetch the off-chain data
        uint64  time;               //time
        uint16  accuracy;           //target 0-100
        uint256 price;              //the max amount he can pay
        uint64  resultID;           //dataID to fetch the result
        uint64  numValidationsNeeded;   //user defined the validation
        bool[]  validations;        //multisignature from validations
        bool    isValid;            //the final flag
        bool    status;        		//one of the four stages
    }
    
    struct Provider {
        address payable addr;       //providers address
        uint64  providedCount;      //reputaion-like reference for each provider, future use
        uint64  requestedCount;     //
        uint64  maxTime;            //max time
        uint16  maxTarget;          //max target he need
        uint256 minPrice;           //lowest price can accept
        bool    available;          // Used to determine if provider is already doing something
    }

Global variables:
	uint128 public requestCount;                    //total number of requests sent to contract
	uint64  public providerCount;                   //total number of active providers in the mapping below
	
	uint128 public pendingCount;					
    uint128 public providingCount;                  //total number of requests that being computed (assgined)
    
	address[] public providerPool;                  //record the available providers; active objects
    uint128[] public requestPool;                   //record the pending request;	active objects
	
	/////////uint64[] public spaces 			
	//NOTE: this is deprecated since version v1.0, address is used as identifier 
	//thus no need to keep tracking the empty spaces, no need to delete element from mapping 
	//because every possible key is stored their.
	//an array that saves the indexes of holes created in the provider mapping when stopProviding is called.
	//By popping values from the array we can assign new providers these spots in the mapping.

Global mappings:
	
	mapping (address => Provider) public providerList;   
		//list of known providers. Record every provider addr ever registered.
		//Maps providerID to Provider object
		//Note: providerID is like the identity of a person, it is not the identifier of the Provider object
		//since a person could have multiple computers (multiple addresses).
		//The address of provider is the only identifier for the provider object
    
	mapping (address => uint64) public providerID;      
		//look up providerID using address     NOTE: possible not needed
		//Address is the only identifier for provider object. providerID could possibly be same between different address.
    	//e.g. Tom has Two account with addr_1, addr_2, but he could be assigned an unique providerID.
	
	
    mapping (uint128 => Request) public requestList;    
		//mapping requestCount to Request object, requestCount is the unique number used as identifier
		//request changing status did not change requestCount, only effect pendingCount and providingCount;
		//re-submit same request result in duplicate request for now
		//TODO: handle the duplication
		
    mapping (address => uint128[]) public requestID;       
		//look up requestID using user's address, tracking all the request submited by the very person
		//NOTE: single user could have multiply requestID,
		//for the requests, requestCount (uint128) is the only identifier.
    	//address is not because multiple request could come from same address
	
    	//////uint64[] public spaces;                             //Open spaces where providers left. should be filled when new provider comes
    	//space is deprecated
	
	mapping (address => uint256) public balanceList;    
		//for keeping track of how much money requesters have sent
    
	
	
	
	
The whole scenario is working in following steps:
0. Deploy X to the blockchain
	Constructor is called:
		requestCount, provideCount, numProviders all initialized to 0
0.5 B startProviding()..
	PSUEDOCODE
	check new or existed provider
	new {
		update providerList: set up new config
		update providerID //for now , disable one ID refer to multiple address
		update pool
		increase count
	existed{
		update config
	wait to be assigned.



1. A send requestTask to X
	requestTask(uint64 dataID, uint16 target, uint64 time) payable public returns (bool)
	1. dataID	//Let’s say raw data is stored off-chain. Use this ID to achieve data
	2. target	//error target defined by A, lets say this is a fixed length percentage. E.g. correction rate = 95.1234%, then target = 951234. Correct rate greater than this is acceptable.
	3. time		//time need to be done, deadline = Timelimit + now.
	4. msg.value 	//the money willing to pay, this is passed in the value field of the Tx and saved in requestors balance
	
	Here the contract will create a struct Request using the parameters with the following values:
	struct Request {
		address addr; 			//msg.sender - address of the requestor
		address provider;		//0x0 - updateed in assignTask if an available provider is found
		uint128 reqID;			//requestCount -- global counter
		uint64 dataID;			//parameter passed in as dataID
		uint64 time;			//parameter passed in as time
		uint16 accuracy;		//parameter passed in as target
		uint256 price; 			//parameter passed in as msg.value
		uint64 resultID;		//0 - changed in completeTask
		uint64 numValidationsNeeded; 	//0 - changed when provider submits results and validations are needed
		bool[] validations;		//emptyArray - filled in submitValidation calls
		bool isValid;			//false - changed in checkValidation
		bool complete;			//false - changed in completeTask
    	}
	
	PSUEDOCODE
	init emptyArray (for multi-sig)
	init Request req
	update list, pool, count
	return assignTask(req)
	
2. X executes assignTask
	assignTask(Request req) private returns (bool)
	1. req - the request struct built in requestTask -- updated throughout process and can be accessed via mapping
	
	PSUEDOCODE
	For each entry of provider mapping:
		if real provider and the request conditions meet their requirements and they are available
			update global balances
			update request.provider
			save request to mapping
			provider.availability = false
			increment global requestCount
			emit event for provider to see and act upon
			return true
		else
			try next provider entry in mapping
	//upon failing to find provider (loop exited)
	send ether back to requestor
	return false
	
3. B sees event with his address, does the requested computation then sends completeTask to X
	completeTask(uint128 reqID, uint64 resultID) public returns (bool)
	1. reqID - the unique ID of the request that is being completed
	2. resultID - similar to dataID. Let’s say raw data is stored off-chain. Use this ID to achieve data
	
	This function confirms that the msg.sender was the original chosen provider then calls validateTask if they were.
	Also sets the provider to be available for a new request again.
	
	PSUEDOCODE
	If msg.sender is the provider of request reqID
		update request.complete
		update request.resultID
		provider.available = true
		return validateTask(reqID)
	else 
		return false
		
4. X executes validateTask
	validateTask(uint128 reqID) private returns (bool)
	1. reqID - unique ID of the request that is being validated
	
	This function selects a certain number of providers to validate the work done by the provider B.
	If not enough providers are available for validation then the function returns false and the provider remains unavailable
	Each validator gets paid a predetermined amount of the original offering from the requestor.
	
	PSUEDOCODE
	validatorsFound = 0
	update request.numValidationsNeeded (possibly 1/10th of total providers, but set to 3 right now)
	For each entry in the provider mapping until validatorsFound == numValidators:
		if provider is real and available
			emit event for validator to see and act upon (nodes C,D,E)
			incrememnt validatorsFound
		else 
			try next provider entry in mapping
	if validatorsFound == numValidators return true
	else return false
	
	
5. C,D,E see event to validate with their address, do computation, and send result to submitValidation
	submitValidation(uint128 reqID, bool result) public returns (bool)
	1. reqID - unique ID used to refer to request being validated
	2. result - true or false, whether results were validated or not
	
	CURRENTLY DOES NOT CHECK WHETHER THE VALIDATORS WERE THE ACTUAL ONES CHOSEN
	ALSO DOES NOT ALSO HAVE A RETURN VALUE -- COULD BE BAD
	
	This function takes in validation results and saves them into the validations array within the request struct
	When the contract sees that enough validations have been submitted it will call checkValidation to determine if the provider is paid.
	
	
	PSUEDOCODE
	init partialPayment - the amount each validator gets paid (currently 1/100th of original offer)
	pay validator and deduct the cost from requestors on-contract balance
	push result onto request.validations array
	if all the validations have been submitted
		payment = remaining ether for task after validators are paid
		return checkValidation(reqID, payment)
		

	
6. X calls checkValidation
	checkValidation(uint128 reqID, uint payment) private returns (bool)
	1. reqID - unique ID used to refer to request that was validated
	2. payment - amount of ether that the provider will receive if work is successfully validated
	
	This function looks through each submitted validation and determines if 2/3 of the submissions were successful.
	If so the work was valid, and the provider gets paid.
	Otherwise the validations failed and the requestor gets some of the money back (validators are paid either way)
	
	PSUEDOCODE
	successCount = 0
	for each validation submitted:
		if validation == true
			successCount++
	if successCount >= 2/3 of request.numValidationsNeeded
		send payment to provider and deduct value from requestors on-contract balance
		request.isValid <- true
	else 
		send payment back to requestor and deduct value from his on-contract balance
	emit event saying task is done (whether successful or not) for requestor to see
	return request.isValid
	
	
	
Registration System:
	To become a provider you must register your provider address in the contracts system.
	This works by determining what type of requests you are willing to fulfill 
	and passing this information to the contract via startProviding function.
	
	1. startProviding(uint64 maxTime, uint16 maxTarget, uint64 minPrice) public 
		1. maxTime - max time you are willing to spend on any given request
		2. maxTarget - max accuracy you can be expected to meet for a request
		3. minPrice - minimum price you will complete a request for

		This function allows a new provider to register and also allows an old provider to 
		update their parameters for the type of requests they will do.

		PSUEDOCODE
		if address isnt already a registered provider
			create the provider and add them to first empty space in the mappings
			numProviders++
		else (address was found in mapping)
			update maxTime, maxTarget, minPrice
			
	2. stopProviding() public
		This function will be called when a provider is done offering his cpu to complete tasks.
		It will remove his address from the mappings and create an empty space for a new provider to fill.
		If they were the most recent provider to register then no empty space will be created, just remove them.
		
		PSUEDOCODE
		if sender is a registered provider
			provider.available = false
			provider.addr = 0
			if sender is not the most recent provider to register
				save their index to spaces array so it can be filled by future provider
			numProviders--
			
			
